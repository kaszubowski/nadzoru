--[[
    This file is part of nadzoru.

    nadzoru is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    nadzoru is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with nadzoru.  If not, see <http://www.gnu.org/licenses/>.

    Copyright (C) 2011 Yuri Kaszubowski Lopes and Eduardo Harbs
--]]

require('lgob.gdk')
require('lgob.gtk')
require('lgob.cairo')

Gui          = {}
local Gui_MT = { __index = Gui }

---
-- Constructor
--
-- @return A new Gui instance
function Gui.new()
    local self = {}
    setmetatable( self, Gui_MT )

    self.note = gtk.Notebook.new()
    self.tabs = {}

    self.window       = gtk.Window.new(gtk.WINDOW_TOPLEVEL)
    self.vbox         = gtk.VBox.new(false, 0)

    self.menubar      = gtk.MenuBar.new()
    self.toolbar      = gtk.Toolbar.new()
    self.hbox         = gtk.HBox.new(false, 0)
    self.statusbar    = gtk.Statusbar.new()

    self.context      = self.statusbar:get_context_id("default")
    self.statusbar:push(self.context, "Statusbar message")

    self.actions   = {}
    self.menu      = {}
    self.menu_item = {}

    --Actions
    self:add_action('quit', nil, "Quit nadzoru", 'gtk-quit', gtk.main_quit )

    --ToolBar
    self:add_toolbar('quit')

    --Menu
    self:add_menu('file', "_File")
    self:add_menu_item('file', 'quit')

    --** Packing it! (vbox) **--
    self.vbox:pack_start(self.menubar, false, false, 0)
    self.vbox:pack_start(self.toolbar, false, false, 0)
    self.vbox:pack_start(self.note   , true, true, 0)
    self.vbox:pack_start(self.statusbar, false, false, 0)
    self.window:add(self.vbox)

    --** window defines **--
    self.window:set("title", "nadzoru - simulator", "width-request", 800,
        "height-request", 600, "window-position", gtk.WIN_POS_CENTER,
        "icon-name", "gtk-about")

    self.window:connect("delete-event", gtk.main_quit)

    return self
end

function Gui:run()
    self.window:show_all()
end

function Gui:add_action(name, caption, hint, icon, callback, param)
    self.actions[name] = gtk.Action.new( name, caption, hint, icon, callback, param)
    self.actions[name]:connect("activate", callback, { gui = self, param = param })
end

function Gui:add_menu( name, caption )
    self.menu[name] = gtk.Menu.new()
    local menu_item = gtk.MenuItem.new_with_mnemonic( caption )
    menu_item:set_submenu( self.menu[name] )
    self.menubar:append( menu_item )
    self.window:show_all()
end

function Gui:add_menu_item( menu_name, action_name, ...  )
    self.menu[menu_name]:append ( self.actions[action_name]:create_menu_item() )
    self.window:show_all()
    if (...) then
        self:add_menu_item( menu_name, ... )
    end
end

function Gui:add_toolbar( action_name, ... )
    self.toolbar:add( self.actions[action_name]:create_tool_item() )
    if (...) then
        self:add_toolbar( ... )
    end
end

function Gui:add_tab( widget, title )
    return self.note:insert_page( widget, gtk.Label.new(title), -1)
end

function Gui:remove_current_tab( )
    local id = self.note:get_current_pag()
    if id then
        self.note:remove_page( id )
    end
end

return Gui


------------------------------------------------------------------------

--~ function Gui:expose( event )
    --~ if not self.image then return false end
    --~ local cr = gdk.cairo_create( self.drawing_area:get_window() )
    --~ local iWidth, iHeight = self.image:get_width(), self.image:get_height()
--~
    --~ local surface = cairo.ImageSurface.create(cairo.FORMAT_ARGB32, iWidth, iHeight)
    --~ local ic      = cairo.Context.create(surface)
    --~ ic:rectangle(0, 0, iWidth, iHeight)
    --~ ic:fill()
--~
    --~ cr:set_source_surface(self.image, 10, 10)
    --~ cr:mask_surface(surface, 10, 10)
    --~ surface:destroy()
    --~ cr:destroy()
    --~ ic:destroy()
--~
    --~ return false
--~ end
--~
--~ function Gui:draw_graph()
    --~ if not self.automaton then return end
--~
    --~ local dot  = self.automaton:simulate_generate_graph( self.deep )
    --~ if dot then
        --~ local file_dot = io.open("temp.dot", "w+")
        --~ file_dot:write( dot )
        --~ file_dot:close()
        --~ os.execute('dot -Tpng -otemp.png temp.dot')
    --~ end
    --~ self.image  = cairo.ImageSurface.create_from_png("temp.png")
    --~ self.drawing_area:set_size_request(self.image:get_width(), self.image:get_height())
    --~ self.drawing_area:queue_draw()
    --~ --self.window:queue_draw()
--~
    --~ --treeview
    --~ local events = self.automaton:simulate_get_current_state_events_info()
    --~ self.simulate_events = {}
    --~ self.model:clear()
    --~ for ch_ev, ev in ipairs( events ) do
        --~ self.model:append(self.iter, nil)
        --~ self.model:set(self.iter, 0, ev.event.name or "-")
        --~ self.simulate_events[ev.event.name] = ev.num_ev
    --~ end
--~
    --~ if self.win_exp_con then
        --~ self.drawing_area:disconnect( self.win_exp_con )
    --~ end
    --~ self.win_exp_con = self.drawing_area:connect("expose-event", self.expose, self)
--~ end

