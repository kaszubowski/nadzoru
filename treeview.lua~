local treeview    = {}
local treeview_MT = { __index = treeview }

function treeview.new()
    local self = {
        data       = {},
        columns    = {},
        render     = {},
        model_list = {},
    }
    self.view      = gtk.TreeView.new()
    self.iter      = gtk.TreeIter.new()
    self.selection = self.view:get_selection()
    self.selection:set_mode( gtk.SELECTION_SINGLE )
    setmetatable( self, treeview_MT )
    return self
end

function treeview:bind_onchange( callback, param )
    self.selection:connect( 'changed', callback, param )

    return self
end

function treeview:add_column_text( caption )
    self.render[#self.render +1] = gtk.CellRendererText.new()
    self.columns[#self.columns +1] = gtk.TreeViewColumn.new_with_attributes(
        caption,
        self.render[#self.render],
        'text',
        #self.columns
    )
    self.view:append_column( self.columns[#self.columns] )
    self.model_list[#self.model_list +1] = 'gchararray'

    return self
end

function treeview:add_column_togglw( caption, callback, param )
    self.render[#self.render +1] = gtk.CellRendererToggle.new()
    self.columns[#self.columns +1] = gtk.TreeViewColumn.new_with_attributes(
        caption,
        self.render[#self.render],
        'active',
        #self.columns
    )
    self.view:append_column( self.columns[#self.columns] )
    self.model_list[#self.model_list +1] = 'gboolean'
    if type(callback) == 'function' then
        self.render[#self.render]:connect('toggled', callback, param)
    end

    return self
end



function treeview:build(  )
    self.model = gtk.ListStore.new( unpack( self.model_list ) )
    self.view:set( 'model', self.model )

    return self.view
end

function treeview:clear_data()
    self.data = {}

    return self
end

function treeview:clear_gui()
    if not self.model then return end
    self.model:clear()

    return self
end

function treeview:clear_all()
    self:clear_data()
    self:clear_gui()

    return self
end

function treeview:update()
    self:clear_gui()
    for ch_row, row in ipairs( self.data ) do
        self.model:append( self.iter )
        self.model:set( self.iter, unpack( row ) )
    end

    return self
end

function treeview:get_select( column )
    local res, model = self.selection:get_selected( self.iter )
    if res then
        return model:get( self.iter, column + 1 )
    end
end

function add_row( row )
    self.data[#self.data +1] = row

    return self
end

